;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 18-Dec-2015
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdint.h>
;#include <string.h>
;#include <delay.h>
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;#define WLeft_1 PORTC.4
;#define WLeft_2 PORTC.3
;#define WRight_1 PORTC.2
;#define WRight_2 PORTD.7
;#define LedTest PORTD.6
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0057 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0058 char status,data;
; 0000 0059 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 005A data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 005B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 005C    {
; 0000 005D    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 005E #if RX_BUFFER_SIZE == 256
; 0000 005F    // special case for receiver buffer size=256
; 0000 0060    if (++rx_counter == 0)
; 0000 0061       {
; 0000 0062 #else
; 0000 0063    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0064    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0065       {
; 0000 0066       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 0067 #endif
; 0000 0068       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0069       }
; 0000 006A    }
;PCODE: $0000002A VOL: 0
; 0000 006B }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0072 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0073 char data;
; 0000 0074 while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0075 data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0076 #if RX_BUFFER_SIZE != 256
; 0000 0077 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0078 #endif
; 0000 0079 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 007A --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 007B #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 007C return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007D }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 008D {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 008E if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 008F    {
; 0000 0090    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0091    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0092 #if TX_BUFFER_SIZE != 256
; 0000 0093    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0094 #endif
; 0000 0095    }
;PCODE: $0000005A VOL: 0
; 0000 0096 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 009D {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 009E while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 009F #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 00A0 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A1    {
; 0000 00A2    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A3 #if TX_BUFFER_SIZE != 256
; 0000 00A4    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A5 #endif
; 0000 00A6    ++tx_counter;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A7    }
; 0000 00A8 else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A9    UDR=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AA #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 00AB }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;int i; // running variable
;char AP[15]; // Save IP Address of Access Point
;char STA[15]; // save IP Address of Station Point
;int l_ap, l_sta; //the length of IP of AP and STA
;int cmd[3]; // save command to exec
;char LCD_Buff[16]; // buffer of LCD
;
;// prototype
;void Exec_Cmd(int mode);
;int Get_Cmd(char c);
;
;void Control_mode0(int dir, int state);
;void Control_mode1(int state);
;void Control_mode5();
;void ShowIP();
;
;// mode 0
;void Stop();
;void Forward();
;void Backward();
;void Straight();
;void Left();
;void Right();
;
;// mode 1
;//void Stop();
;//void Forward();
;//void Backward();
;void Turn_Left();
;void Turn_Right();
;
;// External Interrupt 0 service routine
;//interrupt [EXT_INT0] void ext_int0_isr(void){
;//
;//    // Place your code here
;//    //putchar('2'); // send command to ESP
;//    //Control_mode2(); // receiver data from ESP
;//    LedTest = 1;
;////    delay_ms(2000);
;////    LedTest = 0;
;//}
;
;// Get IP Server on ESP and display to LCD
;interrupt [EXT_INT1] void ext_int1_isr(void){
; 0000 00DF interrupt [3] void ext_int1_isr(void){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00E0 
; 0000 00E1     // Place your code here
; 0000 00E2     LedTest = 1;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00E3     ShowIP();
;PCODE: $0000008A VOL: 0
; 0000 00E4     LedTest = 0;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00E5 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;void main(void)
; 0000 00E8 {
;PCODE: $00000090 VOL: 0
; 0000 00E9 // Declare your local variables here
; 0000 00EA 
; 0000 00EB // Input/Output Ports initialization
; 0000 00EC // Port A initialization
; 0000 00ED // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 00EE // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 00EF PORTA=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00F0 DDRA=0xF0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00F1 
; 0000 00F2 // Port B initialization
; 0000 00F3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00F4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00F5 PORTB=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00F6 DDRB=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00F7 
; 0000 00F8 // Port C initialization
; 0000 00F9 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 00FA // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=T State0=T
; 0000 00FB PORTC=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00FC DDRC=0x1C; //C2 (Right 1),3 (Left 2),4 (Left 1): output
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00FD 
; 0000 00FE // Port D initialization
; 0000 00FF // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=Out Func0=In
; 0000 0100 // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=0 State0=P
; 0000 0101 PORTD=0x09;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0102 DDRD=0xF2; //D1 (TxD),4 (OC1B - Reserved),5 (OC1A),6 (led test),7 (Right 2): output; D0 (RxD), D3 (INT1): input
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0103 
; 0000 0104 // Timer/Counter 0 initialization
; 0000 0105 // Clock source: System Clock
; 0000 0106 // Clock value: Timer 0 Stopped
; 0000 0107 // Mode: Normal top=0xFF
; 0000 0108 // OC0 output: Disconnected
; 0000 0109 TCCR0=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 010A TCNT0=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 010B OCR0=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 010C 
; 0000 010D // Timer/Counter 1 initialization
; 0000 010E // Clock source: System Clock
; 0000 010F // Clock value: 1000.000 kHz
; 0000 0110 // Mode: Fast PWM top=ICR1
; 0000 0111 // OC1A output: Non-Inv.
; 0000 0112 // OC1B output: Non-Inv.
; 0000 0113 // Noise Canceler: Off
; 0000 0114 // Input Capture on Falling Edge
; 0000 0115 // Timer1 Overflow Interrupt: Off
; 0000 0116 // Input Capture Interrupt: Off
; 0000 0117 // Compare A Match Interrupt: Off
; 0000 0118 // Compare B Match Interrupt: Off
; 0000 0119 TCCR1A=0xA2;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 011A TCCR1B=0x1A;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 011B TCNT1H=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 011C TCNT1L=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 011D ICR1H=0x4E;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 011E ICR1L=0x20;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 011F OCR1AH=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0120 OCR1AL=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0121 OCR1BH=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0122 OCR1BL=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0123 
; 0000 0124 // Timer/Counter 2 initialization
; 0000 0125 // Clock source: System Clock
; 0000 0126 // Clock value: Timer2 Stopped
; 0000 0127 // Mode: Normal top=0xFF
; 0000 0128 // OC2 output: Disconnected
; 0000 0129 ASSR=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 012A TCCR2=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 012B TCNT2=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 012C OCR2=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 012D 
; 0000 012E // External Interrupt(s) initialization
; 0000 012F // INT0: Off
; 0000 0130 // INT1: On
; 0000 0131 // INT2: Off
; 0000 0132 GICR|=0x80;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0133 MCUCR=0x08;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0134 GIFR = 0xC0;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0135 MCUCSR=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0136 
; 0000 0137 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0138 TIMSK=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0139 
; 0000 013A // USART initialization
; 0000 013B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 013C // USART Receiver: On
; 0000 013D // USART Transmitter: On
; 0000 013E // USART Mode: Asynchronous
; 0000 013F // USART Baud Rate: 9600
; 0000 0140 UCSRA=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0141 UCSRB=0xD8;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0142 UCSRC=0x86;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0143 UBRRH=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0144 UBRRL=0x33;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0145 
; 0000 0146 // Analog Comparator initialization
; 0000 0147 // Analog Comparator: Off
; 0000 0148 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0149 ACSR=0x80;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 014A SFIOR=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 014B 
; 0000 014C // ADC initialization
; 0000 014D // ADC disabled
; 0000 014E ADCSRA=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 014F 
; 0000 0150 // SPI initialization
; 0000 0151 // SPI disabled
; 0000 0152 SPCR=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0153 
; 0000 0154 // TWI initialization
; 0000 0155 // TWI disabled
; 0000 0156 TWCR=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0157 
; 0000 0158 // Alphanumeric LCD initialization
; 0000 0159 // Connections specified in the
; 0000 015A // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 015B // RS - PORTC Bit 5
; 0000 015C // RD - PORTC Bit 6
; 0000 015D // EN - PORTC Bit 7
; 0000 015E // D4 - PORTA Bit 3
; 0000 015F // D5 - PORTA Bit 2
; 0000 0160 // D6 - PORTA Bit 1
; 0000 0161 // D7 - PORTA Bit 0
; 0000 0162 // Characters/line: 16
; 0000 0163 lcd_init(16);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0164 lcd_clear();
;PCODE: $000000E5 VOL: 0
; 0000 0165 lcd_gotoxy(0,0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0166 lcd_puts("Ninja Way");
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0167 
; 0000 0168 // Global enable interrupts
; 0000 0169 #asm("sei")
;PCODE: $000000EF VOL: 0
	sei
;PCODE: $000000F0 VOL: 0
; 0000 016A 
; 0000 016B LedTest = 0;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 016C OCR1A = 700;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 016D delay_ms(1000);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 016E OCR1A = 1150;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 016F Control_mode0(0,0);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0170 
; 0000 0171 while (1)
;PCODE: $000000FF VOL: 0
; 0000 0172       {
; 0000 0173         // Place your code here
; 0000 0174         cmd[0] = Get_Cmd(getchar()); // get MODE
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0175         Exec_Cmd(cmd[0]); // Executing
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0176       }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0177 }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0

	.DSEG
_0x18:
	.BYTE 0xA
;
;// mode 0, 1
;// byte 0: mode
;// byte 1: mode 0: dir  , mode 1: x    , mode 2: ..
;// byte 2: mode 0: state, mode 1: state, mode 2: ..
;
;// mode 2: after get the first byte of data through UART into cmd[0] (value = 2 --> mode 2)
;// the next 2 bytes: a one digit number -- the number of bytes of the number of bytes of the IP address, Subnet Mask, respectively (just only equal 1)
;// the next bytes: the 2 numbers of bytes of the IP address, Subnet Mask, respectively (just only is a one or two digit number)
;// the next bytes: the IP address, Subnet Mask of Server on ESP, respectively
;// For examlpe: an array of bytes when mode 2 is activated
;// 2 2 2 1 1 1 3 1 9 2 . 1 6 8 . 4 . 1 2 5 5 . 2 5 5 . 2 5 5 .0
;// Explaining:
;// 192.168.4.1 includes 11 bytes, 255.255.255.0 includes 13 bytes
;// 11 is a number including 2 bytes, and 13 is too
;
;// mode 0: direct by 2 front wheels
;// mode 1: direct by 2 behind wheels
;// mode 2: print IP ESP to LCD
;// mode 4: disconnect wifi - process in ESP
;void Exec_Cmd(int mode){
; 0000 018C void Exec_Cmd(int mode){

	.CSEG
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 018D     switch(mode){
;	mode -> Y+0
;PCODE: $0000010E VOL: 0
; 0000 018E         case 0: for(i = 1; i < 3; i++) cmd[i] = Get_Cmd(getchar()); Control_mode0(cmd[1], cmd[2]); break;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 018F         case 1: for(i = 1; i < 3; i++) cmd[i] = Get_Cmd(getchar()); Control_mode1(cmd[2]);         break;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0190         case 5: {
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0191             Control_mode5();
;PCODE: $00000158 VOL: 0
; 0000 0192         }break;
;PCODE: $00000159 VOL: 0
; 0000 0193         default: ;
;PCODE: $0000015A VOL: 0
; 0000 0194     }
;PCODE: $0000015B VOL: 0
; 0000 0195 }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;
;// Sub 48 for getting the number in Binary, not in ASCII
;int Get_Cmd(char c){
; 0000 0198 int Get_Cmd(char c){
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0199     return c - 48;
;	c -> Y+0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 019A }
;PCODE: $00000166 VOL: 0
;
;//
;void Control_mode0(int dir, int state){
; 0000 019D void Control_mode0(int dir, int state){
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 019E     switch(dir){
;	dir -> Y+2
;	state -> Y+0
;PCODE: $00000169 VOL: 0
; 0000 019F         case 0: Straight(); break;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 01A0         case 1: Left(); break;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 01A1         case 2: Right(); break;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 01A2         default: Straight(); break;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 01A3     }
;PCODE: $0000017B VOL: 0
; 0000 01A4 
; 0000 01A5     switch(state){
;PCODE: $0000017C VOL: 0
; 0000 01A6         case 0: Stop(); break;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 01A7         case 1: Forward(); break;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 01A8         case 2: Backward(); break;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 01A9         default: Stop(); break;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 01AA     }
;PCODE: $0000018E VOL: 0
; 0000 01AB }
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;
;// 0: Stop, 1: Go Forward, 2: Go Backward, 3: Turn Left, 4: Turn Right
;void Control_mode1(int state){
; 0000 01AE void Control_mode1(int state){
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 01AF     switch(state){
;	state -> Y+0
;PCODE: $00000194 VOL: 0
; 0000 01B0         case 0: Stop(); break;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 01B1         case 1: Forward(); break;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 01B2         case 2: Backward(); break;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 01B3         case 3: Turn_Left(); break;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 01B4         case 4: Turn_Right(); break;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 01B5         default: Stop(); break;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 01B6     }
;PCODE: $000001B0 VOL: 0
; 0000 01B7 }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;
;//
;void Control_mode5(){
; 0000 01BA void Control_mode5(){
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 01BB     char len_len_ap, len_len_sta; // the number of bytes of the number of bytes of the IP address, Subnet Mask, respectively (just only equal 1)
; 0000 01BC     char len_ap[2], len_sta[2]; // the number of bytes of the IP address, Subnet Mask, respectively (just only is a one or two digit number)
; 0000 01BD 
; 0000 01BE 
; 0000 01BF     len_len_ap = Get_Cmd(getchar());
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;	len_len_ap -> R17
;	len_len_sta -> R16
;	len_ap -> Y+4
;	len_sta -> Y+2
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 01C0     len_len_sta = Get_Cmd(getchar());
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 01C1 
; 0000 01C2     for(i = 0; i < len_len_ap; i++) len_ap[i] = Get_Cmd(getchar());
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 01C3 for(i = 0; i < len_len_sta; i++) len_sta[i] = Get_Cmd(getchar());
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 01C5 if(len_len_ap == 1) l_ap = len_ap[0];
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 01C6     else l_ap = len_ap[1] + len_ap[0] * 10;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 01C7     if(len_len_sta == 1) l_sta = len_sta[0];
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 01C8     else l_sta = len_sta[1] + len_sta[0] * 10;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 01C9 
; 0000 01CA     for(i = 0; i < l_ap; i++) { AP[i] = getchar();}
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 01CB     for(i = 0; i < l_sta; i++) { STA[i] = getchar();}
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 01CC 
; 0000 01CD     ShowIP();
;PCODE: $00000245 VOL: 0
; 0000 01CE }
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;
;void ShowIP(){
; 0000 01D0 void ShowIP(){
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 01D1     lcd_clear();
;PCODE: $0000024F VOL: 0
; 0000 01D2     lcd_gotoxy(0,0);
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 01D3     lcd_puts("IP AP and");
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 01D4     lcd_gotoxy(0,1);
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 01D5     lcd_puts("IP STA");
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 01D6     delay_ms(2000);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 01D7     lcd_clear();
;PCODE: $00000265 VOL: 0
; 0000 01D8 
; 0000 01D9     lcd_gotoxy(0,0);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01DA     for(i = 0; i < l_ap; i++) lcd_putchar(AP[i]);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 01DC lcd_gotoxy(0,1);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 01DD     for(i = 0; i < l_sta; i++) lcd_putchar(STA[i]);
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01DF delay_ms(2000);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01E0     lcd_clear();
;PCODE: $0000029B VOL: 0
; 0000 01E1     lcd_puts("Ninja Way");
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 01E2 }
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0

	.DSEG
_0x53:
	.BYTE 0x1B
;
;void Stop(){
; 0000 01E4 void Stop(){

	.CSEG
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 01E5     WLeft_1 = 0;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 01E6     WLeft_2 = 0;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 01E7     WRight_1 = 0;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01E8     WRight_2 = 0;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 01E9 }
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;
;void Forward(){
; 0000 01EB void Forward(){
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 01EC     WLeft_1 = 0;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01ED     WLeft_2 = 1;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01EE     WRight_1 = 0;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 01EF     WRight_2 = 1;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01F0 }
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;
;void Backward(){
; 0000 01F2 void Backward(){
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01F3     WLeft_1 = 1;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 01F4     WLeft_2 = 0;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 01F5     WRight_1 = 1;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 01F6     WRight_2 = 0;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 01F7 }
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;
;void Straight(){
; 0000 01F9 void Straight(){
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 01FA     OCR1A = 1150;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 01FB }
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;
;void Left(){
; 0000 01FD void Left(){
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01FE     OCR1A = 700;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01FF }
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;
;void Right(){
; 0000 0201 void Right(){
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0202     OCR1A = 1520;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0203 }
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;
;void Turn_Left(){
; 0000 0205 void Turn_Left(){
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0206     WLeft_1 = 0;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 0207     WLeft_2 = 1;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 0208     WRight_1 = 1;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0209     WRight_2 = 0;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 020A }
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;
;void Turn_Right(){
; 0000 020C void Turn_Right(){
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 020D     WLeft_1 = 1;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 020E     WLeft_2 = 0;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 020F     WRight_1 = 0;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0210     WRight_2 = 1;
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0211 }
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
